---
title: Building an R Package
subtitle: From Scripts to Standardized Open-Source Tools
format:
  clean-revealjs:
    self-contained: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: David Munoz Tord - Senior R Developer
    orcid: 0000-0001-7954-8295
    email: david.tord@cytel.com
    affiliations: Cytel FSP - Johnson & Johnson Innovative Medicine
date: last-modified
execute:
  eval: true
  echo: true
  output: true
  cache: true
  freeze: auto
---

## Life in Pharma: Tables, Tables Everywhere

![](img/tables.jpg)

::::: notes
- Opportunity for automation
:::::

## Case Study: `junco` Clinical Trial Analysis Package



:::: {.columns}

::: {.column width="30%"}

![](img/logo.png)

:::

::: {.column width="70%"}
Example transformation of repetitive clinical trial analysis scripts:

1. **Identify common functions** across multiple studies
2. **Standardize input/output formats**
3. **Create consistent documentation**
4. **Implement validation tests**
5. **Open Sourcing**

:::
::::



:::: notes
I will use our junco package as a case study of R package devlopment for clinpharm
::::


## Challenges in Pharmaceutical Programming

:::::: notes
- Regulatory requirements create unique challenges
- Consistency across studies is critical
- Statistical methods often company-specific
::::::
  -
The pharmaceutical industry faces unique challenges in clinical and statistical programming:

- **Implementing patterns** used across many table shells (developed by dedicated teams)
- **Company-specific statistical methods** that need to be standardized
- **Complex table structures** that must be consistent across studies
- **Need for a core framework** that ensures all company shells can be created consistently

. . .

- → that where I step in !



## Shells Are Table Specific, Table Creation Is Not

:::: notes
We did something very similar to Roche's approach to build up on the core framework of rtables
::::

### The Junco Package Approach

Our solution was to develop our own business logic framework for J&J table creation

![](img/graph1.png)





## Getting to Production

:::: notes
Identifying key features to provide and solving those problems was a big part of our work but
 I will not go to deep into it but let me know if you want ot know more about it
and we will se soem of those feature in demon at the end
::::

The Junco package provides **key features** needed for production-ready clinical tables:

- **True-type font support**: Word wrapping, pagination, and RTF export
- **Higher order column counts**: Utilities for spanning column headers
- **Guaranteed pathability in row space**
- **Nearest-value (SAS-like) rounding support**: Maintaining consistency with existing processes
- **Statistical calculations**: In accord with business logic
- **Robust approach for risk diff columns**



## Limitations of Script-Based Solutions

::::: notes
Caveats of Shipping Standardized Code as Scripts
Scripts are often the starting point for many R users, especially in pharma where SAS scripts have been the norm.
However, as analyses become more complex and need to be shared across teams or studies, the limitations of scripts become apparent.
Packages provide a structured solution to all these problems !
they have formal documentation systems, dependency management, built-in testing frameworks, and proper versioning.
Faciliatte knowledge transfer between team members
:::::

- **Poor portability**: Hardcoded paths and environment-specific settings
- **Code duplication**: Functions often copied across multiple scripts
- **Reload overhead**: Need to source entire scripts even when only one function is needed
- No tools for **documentation**, **testing** and **difficult version tracking**

:::::{.callout-note}
## Impact on Productivity
When standardized code is distributed as scripts, users spend significant time troubleshooting environment issues, manually tracking versions, and repeatedly reloading large files for small changes.
:::::

## Creating a Package/Library  {background-color="#fbfaf6"}

### Code Design and API for Users

::::: notes
A big challenge when writing package code the design API! Basically you ar not writing code for you  nor code that can be modifed by the user SO
you need to spend a lot of time thinking about:
- **Future extensibility**: Adding new features later often requires foresight in initial design. Example: A simple `plot_data()` function might need to evolve to support multiple visualization types, requiring a complete redesign if not initially structured to accommodate this.
- **Breaking changes**: Once users adopt your functions, changing parameter names or return structures can break their code.
- **Function and Parameter naming consistency**: Inconsistent naming patterns confuses users. example the tidyverse prefixing 9helps congitive load and function discovery)
Also Using different parameter names for the same concept across functions creates confusion. Example: `treatment_group` in one function but `trt_grp` in another.
- **Backward compatibility**: As your package evolves, maintaining support for older function calls becomes increasingly difficult without initial planning
:::::


:::: {.columns}

::: {.column width="60%"}

Once we had the core functionality working, we needed to focus on:

- **User-friendly API**: Creating intuitive functions that match users' mental models
- **Consistent interfaces**: Ensuring functions work together seamlessly
- **Clear documentation**: Making the package accessible to non-developers


:::

::: {.column width="40%"}
![](img/API.jpeg)
:::
::::

:::::{.callout-note}
API design is one of the most critical and challenging aspects of writing good code
:::::



## Documentation

:::: notes
Extremely important to have good documentation,
the package approach helps a ton by having a framework (i.e. roxygen2) which facilitates and streamlines the creation of documentation,
you can also add CI/CD pipelines to apply strict rules to the developers to "force" them to write minimal documentation
::::

### Using roxygen2 and pkgdown

Documentation is critical for package adoption and proper use:

:::: {.columns}

::: {.column width="60%"}

1. **roxygen2 for function documentation**:
```r
#' Calculate risk difference with confidence intervals
#'
#' @param group1 Vector of outcomes for first group
#' @param group2 Vector of outcomes for second group
#' @param conf.level Confidence level (default: 0.95)
#' @return A list with risk difference and Cis
#' @export
risk_diff <- function(group1, group2, conf.level = 0.95) {
 # Function implementation
}
```

2. **pkgdown for website generation**:
```r
usethis::use_pkgdown()
pkgdown::build_site()
```
:::

::: {.column width="40%"}
<iframe src="https://johnsonandjohnson.github.io/junco/reference/index.html" width="100%" height="500px" data-external="1"></iframe>
:::
::::




## Ensuring Package Quality

:::: notes
is specially important  for Pharmaceutical Validation
unit test: Verify each function works as expected BRIEF EXAMPLE
Code coverage: Metric that measures the percentage of our package's code executed by your tests:
Integration tests ; Verify that multiple components of the system work together as expected. e.g. creating listings
 All that helps to Include detailed information about validation status and intended use cases, to help users understand if the package meets their regulatory requirements.
::::


### Unit Testing and Validation

Quality assurance is essential for pharmaceutical applications:

:::: {.columns}

::: {.column width="50%"}
- **Unit tests**: Verify each function works as expected
- **Code coverage**: Metric that measures the percentage of your package's code executed by your tests: [junco's coverage](https://github.com/johnsonandjohnson/junco/blob/26e7c3470e40f2e2564ba5c0aa58902ce518de06/tests/testthat/test-pruning_functions.R#L23)
- **Integration tests**: Ensure components work together correctly
:::

::: {.column width="50%"}

```{r, unit-test}
#| echo: true
#| eval: true
#| output: true
#| code-fold: false
#| code-overflow: scroll
#| cache: true
#| cache-lazy: false
# Basic unit testing example
add_values <- function(x, y) {
  return(x + y)
}

library(testthat)

test_that("1: addition works", {
  expect_equal(add_values(2, 2), 4)
})

test_that("2: we do expected an error", {
   expect_error(add_values("a", 1))
})
```
:::

::::


## Continuous Integration and Deployment (CI/CD)

:::: notes
CI/CD is a process of Automating quality checks and deployments,
It save a extreme amount time, reduce human errors and ensures consistency
EXAMPLE CICD PIPELINES
::::


### Automating Quality Checks

CI/CD reduces manual work while improving quality:


- **Automated testing**: Run tests on every code change
- **Code coverage**: Ensure comprehensive test coverage
- **Style checking**: Maintain consistent coding standards
- **Documentation building**: Keep documentation in sync with code

→ Our [GitHub actions](https://github.com/johnsonandjohnson/junco/actions/runs/16960522080)


:::::{.callout-note}
Also available internally with Jenkins (but MUCH more effort and knowledge needed)
:::::


# Advanced Topics {background-color="#40666e"}

:::: notes
pass..
::::

## Version Control and Collaboration

### Best Practices for Team Development

::::: notes
we use different tools and (softare) best practices
- Semantic versioning - communicate breaking changes and Dependency management - critical for long-term maintenance
- Git branching - isolate features, maintain stable branches, dev, main, etc..
- Code review - catch bugs early, share knowledge
- Issue tracking - prioritize work, document decisions -> example of issue
:::::

Effective collaboration requires good processes:

- **Semantic versioning**: Major.Minor.Patch format (`junco` v0.1.1)
- **Git branching strategy**: Feature branches and pull requests
- **Code review**: Ensure quality and knowledge sharing
- **Issue tracking**: Document bugs and feature requests → [issue #45](https://github.com/johnsonandjohnson/junco/issues/45#issuecomment-3200786303)




## Internal vs. External Packages

### Choosing the Right Distribution Method

::::::: notes
Distribution strategy depends on content sensitivity
- Internal: for proprietary methods and algos, company-specific workflows
- GitHub: for quick way ti get stuff out faster feedback,
- CRAN: wider adoption, SPACE and validation, stricter quality standards (now also r-universe)
You need to  Consider validation requirements for each approach
:::::::

Different distribution methods serve different needs:

- **Internal packages**: Company-specific methods, proprietary algorithms
- **GitHub packages**: Community collaboration, rapid development
- **CRAN packages**: General-purpose tools, widely applicable methods → integrable with SPACE and package validation processes
-
:::::{.callout-note}
## Pharmaceutical Considerations
Internal packages often contain proprietary methods or company-specific workflows that shouldn't be publicly shared, while more general statistical methods may benefit from community review through CRAN or GitHub distribution.
:::::

## Open Sourcing in Pharma


:::: notes
Collaborative open source development offers significant advantages: say list now
For example we work a lot with Roche's OS team and, release are tested in common -> explain
::::

### Why Joining Efforts is More Efficient

- **Standardization**: Common tools lead to more consistent and comparable analyses
- **Reduced duplication**: Companies avoid solving the same problems repeatedly
- **Shared maintenance burden**: Multiple companies contribute to maintaining core infrastructure
- **Broader testing**: Diverse use cases identify edge cases and bugs more effectively

:::::{.callout-note}
## Industry Transformation
The pharmaceutical industry is increasingly recognizing that pre-competitive collaboration on analytical tools benefits everyone. Projects like the R Validation Hub and Pharmaverse demonstrate how shared open source efforts can accelerate innovation while reducing costs.
:::::




## Demo: Creating Complex Tables with Junco

### Table Creation Script

::::::: notes
- Now I will show a little code demo but we don't have much time so I will just let it here in the presentation for those who want to check it out
just showing the overview of the steps
- Data preparation (ou synthetic data) pharmaverseadamjnj
- Table layout definition process
- Analysis function application
:::::::

```{r table-creation}
#| echo: true
#| eval: true
#| output: true
#| code-fold: false
#| code-overflow: scroll
#| cache: true
#| cache-lazy: false
library(junco)
library(dplyr)
library(pharmaverseadamjnj)

ADEG <- pharmaverseadamjnj::adeg |>
  select(STUDYID, USUBJID, TRT01A, PARAM, AVISIT, AVAL, CHG) |>
  filter(PARAM == "ECG Mean Heart Rate (beats/min)") |>

  mutate(colspan_trt = factor(
    if_else(TRT01A == "Placebo", " ", "Active Study Agent"),
    levels = c("Active Study Agent", " ")
  )) |>

  mutate(rrisk_header = "Risk Difference (%) (95% CI)") |>
  mutate(rrisk_label = paste(TRT01A, paste("vs", "Placebo")))

colspan_trt_map <- create_colspan_map(ADEG,
  non_active_grp = "Placebo",
  non_active_grp_span_lbl = " ",
  active_grp_span_lbl = "Active Study Agent",
  colspan_var = "colspan_trt",
  trt_var = "TRT01A"
)
ref_path <- c("colspan_trt", " ", "TRT01A", "Placebo")

lyt <- basic_table() |>
  split_cols_by(
    "colspan_trt",
    split_fun = trim_levels_to_map(map = colspan_trt_map)
  ) |>
  split_cols_by("TRT01A") |>
  split_rows_by(
    "PARAM",
    label_pos = "topleft",
    split_label = "Blood Pressure",
    section_div = " ",
    split_fun = drop_split_levels
  ) |>
  split_rows_by(
    "AVISIT",
    label_pos = "topleft",
    split_label = "Study Visit",
    split_fun = drop_split_levels,
    child_labels = "hidden"
  ) |>
  split_cols_by_multivar(
    c("AVAL", "AVAL", "CHG"),
    varlabels = c("n/N (%)", "Mean (CI)", "CFB (CI)")
  ) |>
  split_cols_by("rrisk_header", nested = FALSE) |>
  split_cols_by(
    "TRT01A",
    split_fun = remove_split_levels("Placebo"),
    labels_var = "rrisk_label"
  ) |>
  split_cols_by_multivar(c("CHG"), varlabels = c(" ")) |>
  analyze("STUDYID",
    afun = a_summarize_aval_chg_diff_j,
    extra_args = list(
      format_na_str = "-", d = 0,
      ref_path = ref_path, variables = list(arm = "TRT01A", covariates = NULL)
    )
  )

result <- build_table(lyt, ADEG)
```

## Rendered Table Output

::::::: notes
- Final output visualization (this is not exactly what our output looks like , it actually export to rtf or docx
  - but for some reaosn doxc doesnt work very well in html presentation// BUT it gives out
- Formatting consistent with regulatory requirements
- Comparable with traditional SAS output
:::::::
  -
Only on J&J internal network (External TL catalog)[https://sourcecode.jnj.com/pages/ASX-JFYC/junco_tlg_catalog_external/main/browse/]

```{r table-output}
#| echo: true
#| eval: true
#| output: true
#| cache: true
rtables.officer::tt_to_flextable(result)
```

## Summary

### Key Takeaways

::::::: notes
- is taht R packages provide a **structured framework** for organizing code and
- They **improve reproducibility** and **reduce human errors**
- They also facilitate **Documentation and testing**
- Packages can **streamline workflows** in pharmaceutical research and improve efficiency
- Finally. The Return of investment in package development **often pays off** through reuse and reliability
:::::::

<br>

- R packages provide a **structured framework** for organizing code
- They **improve reproducibility** and **reduce errors**
- **Documentation and testing** are essential components
- Packages can **streamline workflows** in pharmaceutical research
- The investment in package development **pays off** through reuse and reliability


## Resources

<br>

::::::: notes
- Here are provided some key learning resources
:::::::

:::: {.columns}

::: {.column width="30%"}

<div style="text-align: center;">
  <img src="https://raw.githubusercontent.com/johnsonandjohnson/junco/dev/man/figures/logo.png" alt="Junco Logo" width="200"/>
</div>
:::
::: {.column width="70%"}

- [R Packages (2e) by Hadley Wickham & Jenny Bryan](https://r-pkgs.org/)
- [roxygen2 documentation](https://roxygen2.r-lib.org/)
- [testthat for testing](https://testthat.r-lib.org/)
- [GitHub Actions for R](https://github.com/r-lib/actions)
:::

::::
## Q&A {background-color="#40666e"}

::::::: notes
- Have questions about R package development or the Junco package?
- Feel free to reach out using the contact information provided.
:::::::

<br>

:::: {.columns}

::: {.column width="60%"}
### Thank You for Your Attention!
<br>
<div style="margin-top: 10px;">

#### `junco` Team Acknowledgements:

- Sairam Gorthi
- Nick Masel
- Ilse Augustyns
- Dan Hofstaedter
- Joe Kovach
- Gabriel Becker

</div>


:::

::: {.column width="40%"}
<div style="background-color: #d9d7d7; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
### Contact Information

<ul style="list-style-type: none; padding-left: 0;">
  <li style="margin-bottom: 15px;">
    <i class="fa fa-envelope" style="color: #40666e;"></i>
    Email: [david.tord@cytel.com](mailto:david.tord@cytel.com)
  </li>
  <li style="margin-bottom: 15px;">
    <i class="fa fa-link" style="color: #40666e;"></i>
    Presentation: [github.com/munoztd0/R_Package-Dev <i class="fa fa-link" style="color: #40666e;"></i>](https://github.com/munoztd0/R_Package-Dev)
  </li>
  <li style="margin-bottom: 15px;">
    <i class="fa fa-github" style="color: #40666e;"></i>
    GitHub: [munoztd0 <i class="fa fa-github" style="color: #40666e;"></i>](https://github.com/munoztd0)
  </li>
</ul>
</div>
:::

::::
