---
title: Building an R Package
subtitle: From Scripts to Standardized Open-Source Tools
format:
  clean-revealjs:
    self-contained: true
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: David Munoz Tord - Senior R Developer
    orcid: 0000-0001-7954-8295
    email: david.tord@cytel.com
    affiliations: Cytel FSP - Janssen
date: last-modified
execute:
  cache: true
  freeze: auto
---

## Life in Pharma: Tables, Tables Everywhere

![](img/tables.jpg)

## Case Study: `junco` Clinical Trial Analysis Package



:::: {.columns}

::: {.column width="30%"}

![](img/logo.png)

:::

::: {.column width="70%"}
Example transformation of repetitive clinical trial analysis scripts:

1. **Identify common functions** across multiple studies
2. **Standardize input/output formats**
3. **Create consistent documentation**
4. **Implement validation tests**
5. **Open Sourcing**

:::
::::



:::: notes
I will use our junco package as a case study of R package devlopment for clinpharm
::::


## Challenges in Pharmaceutical Programming

The pharmaceutical industry faces unique challenges in clinical and statistical programming:

- **Implementing patterns** used across many table shells (developed by dedicated teams)
- **Company-specific statistical methods** that need to be standardized
- **Complex table structures** that must be consistent across studies
- **Need for a core framework** that ensures all company shells can be created consistently

. . .

- → that where I step in !

## Shells Are Table Specific, Table Creation Is Not

### The Junco Package Approach

Our solution was to develop our own business logic framework for J&J table creation

![](img/graph1.png)

:::: notes
We did something very similar to Roche's approach to build up on the core framework of rtables
::::



## Getting to Production

The Junco package provides **key features** needed for production-ready clinical tables:

- **True-type font support**: Word wrapping, pagination, and RTF export
- **Higher order column counts**: Utilities for spanning column headers
- **Guaranteed pathability in row space**
- **Nearest-value (SAS-like) rounding support**: Maintaining consistency with existing processes
- **Statistical calculations**: In accord with business logic
- **Robust approach for risk diff columns**

:::: notes
 I will not go to deep into it but let me know if you want ot know more about it
::::




##  Creating the package {background-color="#40666e"}

<br>

### From Scripts to Standardized Tools

<br>

:::::{.callout-note}
## Industry Benefits

Creating R packages helps pharmaceutical companies:

* Maintain consistency across studies and therapeutic areas
* Reduce time spent on repetitive coding tasks
* Improve compliance with regulatory standards
* Facilitate knowledge transfer between team members
:::::

## Code Design and API for Users {background-color="#fbfaf6"}

:::: {.columns}

::: {.column width="60%"}

Once we had the core functionality working, we needed to focus on:

- **User-friendly API**: Creating intuitive functions that match users' mental models
- **Consistent interfaces**: Ensuring functions work together seamlessly
- **Clear documentation**: Making the package accessible to non-developers


:::

::: {.column width="40%"}
![](img/API.jpeg)
:::
::::

:::::{.callout-note}
API design is one of the most critical and challenging aspects of writing good code
:::::

::::: notes
- **Breaking changes**: Once users adopt your functions, changing parameter names or return structures can break their code.
- **Function naming consistency**: Inconsistent naming patterns create cognitive load. Example: mixing verb-noun (`calculate_risk()`) with noun-verb (`risk_calculate()`) patterns confuses users. example the tidyverse prefixing
- **Parameter consistency**: Using different parameter names for the same concept across functions creates confusion. Example: `treatment_group` in one function but `trt_grp` in another.
- **Future extensibility**: Adding new features later often requires foresight in initial design. Example: A simple `plot_data()` function might need to evolve to support multiple visualization types, requiring a complete redesign if not initially structured to accommodate this.
- **Backward compatibility**: As your package evolves, maintaining support for older function calls becomes increasingly difficult without initial planning. Example: The `dplyr` package maintaining both old and new verb forms during transitions.

- **Discoverability**: Functions should be organized in a way that makes related functionality easy to find. Example: Using consistent prefixes like `tbl_*` for all table-related functions.

Investing time in thoughtful API design upfront saves enormous effort later and prevents user frustration when your package evolves.
:::::

## Documentation

### Using roxygen2 and pkgdown

Documentation is critical for package adoption and proper use:

:::: {.columns}

::: {.column width="60%"}

1. **roxygen2 for function documentation**:
```r
#' Calculate risk difference with confidence intervals
#'
#' @param group1 Vector of outcomes for first group
#' @param group2 Vector of outcomes for second group
#' @param conf.level Confidence level (default: 0.95)
#' @return A list with risk difference and Cis
#' @export
risk_diff <- function(group1, group2, conf.level = 0.95) {
 # Function implementation
}
```

2. **pkgdown for website generation**:
```r
usethis::use_pkgdown()
pkgdown::build_site()
```
:::

::: {.column width="40%"}
<iframe src="https://johnsonandjohnson.github.io/junco/reference/index.html" width="100%" height="500px" data-external="1"></iframe>
:::
::::


:::: notes
Extremely important to have good documentation,
the package approach helps a ton by having a framework (i.e. roxygen2) which faciliates and streamlines the creation of documentation, you can also add CI/CD pipelines to apply strict rules to the developers to "force" them to right minimal documentation
::::

## Ensuring Package Quality

### Unit Testing and Validation

Quality assurance is essential for pharmaceutical applications:

:::: {.columns}

::: {.column width="50%"}
- **Unit tests**: Verify each function works as expected  -> [Example](https://github.com/johnsonandjohnson/junco/blob/26e7c3470e40f2e2564ba5c0aa58902ce518de06/tests/testthat/test-pruning_functions.R#L23)
- **Integration tests**: Ensure components work together correctly
:::

::: {.column width="50%"}
<iframe src="https://johnsonandjohnson.github.io/junco/_xml_coverage_reports/coverage.html" width="100%" height="400px" data-external="1"></iframe>
:::

::::

:::: notes
Comprehensive testing Validating functionality across different scenarios ->
Especially for Pharmaceutical Validation : Include detailed information about validation status and intended use cases to help users understand if the package meets their regulatory requirements.

Inntegration tests ; Verify that multiple components/modules of the system work together as expected.
::::

## Continuous Integration and Deployment

### Automating Quality Checks

CI/CD reduces manual work while improving quality:


- **Automated testing**: Run tests on every code change
- **Code coverage**: Ensure comprehensive test coverage
- **Style checking**: Maintain consistent coding standards
- **Documentation building**: Keep documentation in sync with code

→ Our [GitHub actions](https://github.com/johnsonandjohnson/junco/actions/runs/16960522080)


:::::{.callout-note}
Also available internally with Jenkins (but much more effort and knowledge needed)
:::::

:::: notes
Continuous integration: Automating quality checks and deployment, save a extreme amount time, reduce human errors and ensures consistency
::::



# Advanced Topics {background-color="#40666e"}

## Version Control and Collaboration

### Best Practices for Team Development

Effective collaboration requires good processes:

- **Semantic versioning**: Major.Minor.Patch format (`junco` v0.1.1)
- **Git branching strategy**: Feature branches and pull requests
- **Code review**: Ensure quality and knowledge sharing
- **Issue tracking**: Document bugs and feature requests → [issue #45](https://github.com/johnsonandjohnson/junco/issues/45#issuecomment-3200786303)

:::: notes
Managing dependencies is critical for long-term maintenance:
::::


## Internal vs. External Packages

### Choosing the Right Distribution Method

Different distribution methods serve different needs:

- **Internal packages**: Company-specific methods, proprietary algorithms
- **GitHub packages**: Community collaboration, rapid development
- **CRAN packages**: General-purpose tools, widely applicable methods → integrable with SPACE and package validation processes
-
:::::{.callout-note}
## Pharmaceutical Considerations
Internal packages often contain proprietary methods or company-specific workflows that shouldn't be publicly shared, while more general statistical methods may benefit from community review through CRAN or GitHub distribution.
:::::

## Open Sourcing in Pharma

### Why Joining Efforts is More Efficient

- **Standardization**: Common tools lead to more consistent and comparable analyses
- **Reduced duplication**: Companies avoid solving the same problems repeatedly
- **Shared maintenance burden**: Multiple companies contribute to maintaining core infrastructure
- **Broader testing**: Diverse use cases identify edge cases and bugs more effectively

:::::{.callout-note}
## Industry Transformation
The pharmaceutical industry is increasingly recognizing that pre-competitive collaboration on analytical tools benefits everyone. Projects like the R Validation Hub and Pharmaverse demonstrate how shared open source efforts can accelerate innovation while reducing costs.
:::::

:::: notes
Collaborative open source development offers significant advantages: list list list
For example we work a lot with Roche's OS team and release are tested in common -> explain
::::



## Demo: Creating Complex Tables with Junco

### Table Creation Script

```{r table-creation}
#| echo: true
#| code-fold: false
#| code-overflow: scroll
#| cache: true
#| cache-lazy: false
library(junco)
library(dplyr)
library(pharmaverseadamjnj)

ADEG <- pharmaverseadamjnj::adeg |>
  select(STUDYID, USUBJID, TRT01A, PARAM, AVISIT, AVAL, CHG) |>
  filter(PARAM == "ECG Mean Heart Rate (beats/min)") |>

  mutate(colspan_trt = factor(
    if_else(TRT01A == "Placebo", " ", "Active Study Agent"),
    levels = c("Active Study Agent", " ")
  )) |>

  mutate(rrisk_header = "Risk Difference (%) (95% CI)") |>
  mutate(rrisk_label = paste(TRT01A, paste("vs", "Placebo")))

colspan_trt_map <- create_colspan_map(ADEG,
  non_active_grp = "Placebo",
  non_active_grp_span_lbl = " ",
  active_grp_span_lbl = "Active Study Agent",
  colspan_var = "colspan_trt",
  trt_var = "TRT01A"
)
ref_path <- c("colspan_trt", " ", "TRT01A", "Placebo")

lyt <- basic_table() |>
  split_cols_by(
    "colspan_trt",
    split_fun = trim_levels_to_map(map = colspan_trt_map)
  ) |>
  split_cols_by("TRT01A") |>
  split_rows_by(
    "PARAM",
    label_pos = "topleft",
    split_label = "Blood Pressure",
    section_div = " ",
    split_fun = drop_split_levels
  ) |>
  split_rows_by(
    "AVISIT",
    label_pos = "topleft",
    split_label = "Study Visit",
    split_fun = drop_split_levels,
    child_labels = "hidden"
  ) |>
  split_cols_by_multivar(
    c("AVAL", "AVAL", "CHG"),
    varlabels = c("n/N (%)", "Mean (CI)", "CFB (CI)")
  ) |>
  split_cols_by("rrisk_header", nested = FALSE) |>
  split_cols_by(
    "TRT01A",
    split_fun = remove_split_levels("Placebo"),
    labels_var = "rrisk_label"
  ) |>
  split_cols_by_multivar(c("CHG"), varlabels = c(" ")) |>
  analyze("STUDYID",
    afun = a_summarize_aval_chg_diff_j,
    extra_args = list(
      format_na_str = "-", d = 0,
      ref_path = ref_path, variables = list(arm = "TRT01A", covariates = NULL)
    )
  )

result <- build_table(lyt, ADEG)
```

## Rendered Table Output

```{r table-output}
#| echo: true
#| cache: true
rtables.officer::tt_to_flextable(result)
```

## Summary

### Key Takeaways

<br>

- R packages provide a **structured framework** for organizing code
- They **improve reproducibility** and **reduce errors**
- **Documentation and testing** are essential components
- Packages can **streamline workflows** in pharmaceutical research
- The investment in package development **pays off** through reuse and reliability


## Resources

<br>

:::: {.columns}

::: {.column width="30%"}

<div style="text-align: center;">
  <img src="https://raw.githubusercontent.com/johnsonandjohnson/junco/dev/man/figures/logo.png" alt="Junco Logo" width="200"/>
</div>
:::
::: {.column width="70%"}

- [R Packages (2e) by Hadley Wickham & Jenny Bryan](https://r-pkgs.org/)
- [roxygen2 documentation](https://roxygen2.r-lib.org/)
- [testthat for testing](https://testthat.r-lib.org/)
- [GitHub Actions for R](https://github.com/r-lib/actions)
:::

::::
## Q&A {background-color="#40666e"}

<br><br>

:::: {.columns}

::: {.column width="60%"}
### Thank You for Your Attention!

<div style="margin-top: 20px;">
Have questions about R package development or the Junco package?

Feel free to reach out using the contact information provided.
</div>


:::

::: {.column width="40%"}
<div style="background-color: #d9d7d7; padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
### Contact Information

<ul style="list-style-type: none; padding-left: 0;">
  <li style="margin-bottom: 15px;">
    <i class="fa fa-envelope" style="color: #40666e;"></i>
    Email: [david.tord@cytel.com](mailto:david.tord@cytel.com)
  </li>
  <li style="margin-bottom: 15px;">
    <i class="fa fa-link" style="color: #40666e;"></i>
    Presentation: [github.com/munoztd0/R_Package-Dev <i class="fa fa-link" style="color: #40666e;"></i>](https://github.com/munoztd0/R_Package-Dev)
  </li>
  <li style="margin-bottom: 15px;">
    <i class="fa fa-github" style="color: #40666e;"></i>
    GitHub: [munoztd0 <i class="fa fa-github" style="color: #40666e;"></i>](https://github.com/munoztd0)
  </li>
</ul>
</div>
:::

::::
